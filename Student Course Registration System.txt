import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Course {
    String code;
    String title;
    String description;
    int capacity;
    String schedule;

    Course(String code, String title, String description, int capacity, String schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
    }
}

class Student {
    int id;
    String name;
    List<Course> registeredCourses;

    Student(int id, String name) {
        this.id = id;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }
}

class CourseManagementSystem {
    List<Course> courses;
    List<Student> students;

    CourseManagementSystem() {
        this.courses = new ArrayList<>();
        this.students = new ArrayList<>();
    }

    void displayCourses() {
        System.out.println("Available Courses:");
        for (Course course : courses) {
            System.out.println(course.code + " - " + course.title + " (Capacity: " + course.capacity + ")");
            System.out.println("  Description: " + course.description);
            System.out.println("  Schedule: " + course.schedule);
            System.out.println();
        }
    }

    void displayStudents() {
        System.out.println("Registered Students:");
        for (Student student : students) {
            System.out.println(student.id + " - " + student.name);
            System.out.println("  Registered Courses:");
            for (Course course : student.registeredCourses) {
                System.out.println("    " + course.code + " - " + course.title);
            }
            System.out.println();
        }
    }

    void registerCourse(Student student, Course course) {
        if (course.capacity > 0 && !student.registeredCourses.contains(course)) {
            student.registeredCourses.add(course);
            course.capacity--;
            System.out.println(student.name + " has successfully registered for " + course.title);
        } else {
            System.out.println("Registration failed for " + course.title);
        }
    }

    void dropCourse(Student student, Course course) {
        if (student.registeredCourses.contains(course)) {
            student.registeredCourses.remove(course);
            course.capacity++;
            System.out.println(student.name + " has successfully dropped " + course.title);
        } else {
            System.out.println("Drop failed. " + course.title + " not found in registered courses.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        CourseManagementSystem cms = new CourseManagementSystem();

        cms.courses.add(new Course("CS101", "Introduction to Programming", "Basic programming concepts", 30, "Mon/Wed/Fri 10:00 AM"));
        cms.courses.add(new Course("ENG201", "English Literature", "Classic literature exploration", 25, "Tue/Thu 2:00 PM"));
        cms.courses.add(new Course("MATH301", "Calculus", "Advanced calculus topics", 20, "Mon/Wed 1:00 PM"));

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Display Courses");
            System.out.println("2. Display Students");
            System.out.println("3. Register Course");
            System.out.println("4. Drop Course");
            System.out.println("5. Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    cms.displayCourses();
                    break;
                case 2:
                    cms.displayStudents();
                    break;
                case 3:
                    System.out.print("Enter student ID: ");
                    int studentId = scanner.nextInt();
                    System.out.print("Enter course code: ");
                    String courseCode = scanner.next();

                    Student registerStudent = cms.students.stream().filter(s -> s.id == studentId).findFirst().orElse(null);
                    Course registerCourse = cms.courses.stream().filter(c -> c.code.equals(courseCode)).findFirst().orElse(null);

                    if (registerStudent != null && registerCourse != null) {
                        cms.registerCourse(registerStudent, registerCourse);
                    } else {
                        System.out.println("Invalid student ID or course code.");
                    }
                    break;
                case 4:
                    System.out.print("Enter student ID: ");
                    int dropStudentId = scanner.nextInt();
                    System.out.print("Enter course code: ");
                    String dropCourseCode = scanner.next();

                    Student dropStudent = cms.students.stream().filter(s -> s.id == dropStudentId).findFirst().orElse(null);
                    Course dropCourse = cms.courses.stream().filter(c -> c.code.equals(dropCourseCode)).findFirst().orElse(null);

                    if (dropStudent != null && dropCourse != null) {
                        cms.dropCourse(dropStudent, dropCourse);
                    } else {
                        System.out.println("Invalid student ID or course code.");
                    }
                    break;
                case 5:
                    System.out.println("Exiting program.");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please enter a number between 1 and 5.");
            }
        }
    }
}
